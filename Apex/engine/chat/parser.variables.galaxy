//=========================================================
//		Apex Roleplaying Engine
//		Copyright (c) 2022, Apex Group
//=========================================================
// This software is distributed under the MIT License:
// <http://opensource.org/licenses/MIT>
//=========================================================


// Parser Global Variable Data Table
const string gv_LibapxVariableMapPrefix = "LibapxGlobalVariable_";
void LibapxGlobalVariableSet(int p, string name, string value) {

    LibapxTManagerSetString(gv_LibapxVariableMapPrefix + IntToString(p), name, value);
}

void LibapxGlobalVariableRemove(int p, string name) {

    LibapxTManagerRemoveValue(gv_LibapxVariableMapPrefix + IntToString(p), name);
}

static string GetGlobalVariableValue(string name, int p) {
    return LibapxTManagerGetString(gv_LibapxVariableMapPrefix + IntToString(p), name);
}


static bool GlobalVariableExists(string name, int p) {
    return LibapxTManagerExists(gv_LibapxVariableMapPrefix + IntToString(p), name);
}



// Parser Local Variable Data Table
const string gv_LibapxUnitVariableMapPrefix = "LibapxUnitVariable_";
void LibapxUnitVariableSet(unit u, string name, string value) {
	string unitId = FixedToString(UnitGetCustomValue(u, 0), 0); 
    
    LibapxTManagerSetString(gv_LibapxUnitVariableMapPrefix + unitId, name, value);
}

void LibapxUnitVariableRemove(unit u, string name) {
	string unitId = FixedToString(UnitGetCustomValue(u, 0), 0); 
    
    LibapxTManagerRemoveValue (gv_LibapxUnitVariableMapPrefix + unitId, name);
}

static string GetUnitVariableValue(string name, unit u) {
	string unitId = FixedToString(UnitGetCustomValue(u, 0), 0); 

    return LibapxTManagerGetString(gv_LibapxUnitVariableMapPrefix + unitId, name);
}


static bool UnitVariableExists(string name, unit u) {
	string unitId = FixedToString(UnitGetCustomValue(u, 0), 0); 
    
    return LibapxTManagerExists(gv_LibapxUnitVariableMapPrefix + unitId, name);
}

const string gv_LibapxVariableDataTablePrefix = "LibapxVariable_"; 
void LibapxVariableSet(string name, string value) { 
    name = gv_LibapxVariableDataTablePrefix + name;  
    if(DataTableValueExists(true, name)) { 
        DataTableValueRemove(true, name); 
        DataTableSetString(true, name, value); 
    }
    else { 
        DataTableSetString(true, name, value); 
    }
}

static bool VariableExists(string name) { 
    return DataTableValueExists(true, gv_LibapxVariableDataTablePrefix + name); 
}
static string GetVariableValue(string name) { 
    return DataTableGetString(true, gv_LibapxVariableDataTablePrefix + name); 
}

//Parsing Variable Function Table Creator
// =======================================================
//
const string gv_LibapxVariableFunctionDatatablePrefix = "LibapxVariableFunction_"; 
const string gv_LibapxVariableFunctionMapPrefix = "LibapxVariableFunction_";


// function signature for Apex Variable Functions
string LibapxVariableFunctionSignature(int p, unitgroup u, string argv); 


// funcref type for Apex Variable Functions
typedef funcref<LibapxVariableFunctionSignature> LibapxVariableFunctionType; 


// Counter for the next free array entry in the gv_LibapxVariableFunctionTable array
int gv_LibapxVariableFunctionTableCounter = 0;

//Table of all constants
LibapxVariableFunctionType[250] gv_LibapxVariableFunctionTable;

void LibapxVariableFunctionCreate(string varFunctionName, LibapxVariableFunctionType func) { 
	DataTableSetInt(true, gv_LibapxVariableFunctionDatatablePrefix + gv_LibapxVariableFunctionPrefix + StringCase(varFunctionName, false), gv_LibapxVariableFunctionTableCounter); 
	gv_LibapxVariableFunctionTable[gv_LibapxVariableFunctionTableCounter] = func; 
	gv_LibapxVariableFunctionTableCounter += 1; 
}
void LibapxStringFunctionCreate(string varFunctionName, LibapxVariableFunctionType func) { 
	DataTableSetInt(true, gv_LibapxVariableFunctionDatatablePrefix + gv_LibapxStringFunctionPrefix + StringCase(varFunctionName, false), gv_LibapxVariableFunctionTableCounter); 
	gv_LibapxVariableFunctionTable[gv_LibapxVariableFunctionTableCounter] = func; 
	gv_LibapxVariableFunctionTableCounter += 1; 
}




//Parsing Handlers below
// =======================================================
//
static const string gv_LibapxVariableParserStartString = "${";
static const string gv_LibapxVariableParserEndString = "}";


//Checks if prefixed and postfixed ${anything inside this would return true}
bool LibapxVariableWithinBraceCheck(string stringToCheck, int currentIndex) {
	string stringBefore = StringSub(stringToCheck, 1, currentIndex - 1);
	string stringAfter = StringSub(stringToCheck,  currentIndex + 1, StringLength(stringToCheck));
	int i = 1;
	string temp;
	int openI = 0;
	int closeI = 0;
	bool opened = false;
	bool closed = false;
    int stringBeforeEndIndex = StringFind(stringBefore, gv_LibapxVariableParserEndString, c_stringNoCase);
    int stringBeforeStartIndex = StringFind(stringBefore, gv_LibapxVariableParserStartString, c_stringNoCase);
    int stringAfterEndIndex = StringFind(stringAfter, gv_LibapxVariableParserEndString, c_stringNoCase);
    int stringAfterStartIndex = StringFind(stringAfter, gv_LibapxVariableParserStartString, c_stringNoCase);

	if (
        (stringBeforeStartIndex != -1) 
        &&
        (stringBeforeStartIndex > stringBeforeEndIndex)
        &&
        (stringAfterEndIndex != -1)
        && 
        ((stringAfterEndIndex < stringAfterStartIndex) || (stringAfterStartIndex == -1))
        ) {
        return true;
	}
	return false;
}


//Seperates out operators for easy iteration
static string SpaceOperatorsForReplacement(string input) {
    int j = 1;
    int i = 1;
    string currentOp;
    string current;
    string output = "";
    bool matchedOp = false;
    string thingsToSpace = gv_LibapxValidOperatorsWithParen + " ,";
    
    for (i = 1; StringSub(input, i, i) != ""; i += 1) {
		current = StringSub(input, i, i);
        matchedOp = false;

        j = 1;
        while(StringWord(thingsToSpace, j) != "") {
            currentOp = StringWord(thingsToSpace, j);
            if(currentOp == current) {
                output += " "+currentOp+" ";
                output = output;
                matchedOp = true;
                break;
            }
            j += 1;
        }
        if(!matchedOp && current != " ") {
            output += current;
            output = LibapxStringTrim(output);
        }
    }
    return LibapxStringTrim(output);
}


//Get The Parameters from function
static string GetParamsFromFunction(string input, int startOfFunc) {
    string stringToParse = LibapxStringTrim(StringSub(input, startOfFunc, StringLength(input)));
    int i = 1;
    int paranthesisLevel = 0;
    string current;
    string output = "";
    //RETURN GROUPED FUNCTION PARAMETERS

    while(StringSub(stringToParse, i, i) != "") {
        current = StringSub(stringToParse, i, i);

        // DebugLog(current+" // CURR");

        //FIRST ITERATION
        if(current == "(" && i == 1) {
            paranthesisLevel += 1;
            i += 1;
            // DebugLog("// FIRST ITERATION WAS (");
            continue;
        }
        else if (current != "(" && i == 1) {
            break;
        }

        i += 1;

        if(current == "(") {
            paranthesisLevel += 1;
            // DebugLog("// PARENTHESIS LEVEL INCREASED");
        }
        else if (current == ")") {
            paranthesisLevel -= 1;
            // DebugLog( IntToString(paranthesisLevel) + "// PARENTHESIS LEVEL DECREASED");
            
            if(paranthesisLevel == 0) {
                // DebugLog("// END OF PARENTHESIS PAIRS, [RETURNING]");
                return output;    
            }
        }

        if(paranthesisLevel == 1 && current == ",") {
            // DebugLog("// COMMA FOUND, S P A C I N G");
            output += " , ";
        }
        else if(current != " ") {
            output += current;
        }
        
        // DebugLog(output + " // CURRENT OUTPUT");
    }

    //${$mouse_x(5)}

    //${23 + mouse_y + $mouse_x(5)}

    //${23 + mouse_y + $mouse_x(5+32+6+2)}

    //${23 + mouse_y + $mouse_x(5,$test(123+23)*(5*2))}

    //${23 + mouse_y + $mouse_x(5,$test(123+23)*(5*2)) * 23 + mouse_y + $mouse_x(5,$test(123+23)*(5*2)) + 23 + mouse_y + $mouse_x(5,$test(123+23)*(5*2))}

    return "FAULT";
}

//Is valid for variable parsing
static bool IsValidForVariableParsing(string c) {
	int i = 1;
	string current;
	while(StringWord(gv_LibapxValidOperatorsWithParen + " ,", i) != "") {
		current = StringWord(gv_LibapxValidOperatorsWithParen + " ,", i);

		if(current == c) {
			return true;
		}
		i += 1;
	}

	return false;
} 

static string ParseVariableFunctionStatement(string input, unitgroup ug, int p) {
    int i = 1;
    int j = 1;
    string current = "";
    string funcKey;
    int funcIndex = 0;
    string funcParameters = "";
    string funcParameter = "";
    string entireFunctionReplacer = "";
    string funcOutput;
    string evaluationCandidate = SpaceOperatorsForReplacement(input);
    unit u;
    bool useEvaluator = true;


    while(StringWord(evaluationCandidate, i) != "") {
        current = StringWord(evaluationCandidate, i);
       
        if(
            IsValidForVariableParsing(current)
            ||
            LibapxIsFixed(current)
        ) {
            i += 1;
            continue;
        }

        
        if(LibapxTManagerExists(gv_LibapxVariableFunctionMapPrefix, StringCase(current, false))) {
            funcParameters = GetParamsFromFunction(evaluationCandidate, StringFind(evaluationCandidate, current, false) + StringLength(current));
            


            if(funcParameters == "FAULT") {
                i += 1;
                if(gv_LibapxPlayer[p].helpMessages) {
                LibapxPrintError(p, "\'" + current + "\', Malformed Function, terminating variable parsing");
                }
                return "0";
            }



            entireFunctionReplacer  = LibapxStringTrim(SpaceOperatorsForReplacement(current+"("+funcParameters+")"));

            if(StringFind(evaluationCandidate, entireFunctionReplacer, c_stringNoCase) != -1) {
                evaluationCandidate = StringReplace(
                    evaluationCandidate, 
                    "[FN_REPLACED]", 
                    StringFind(evaluationCandidate, entireFunctionReplacer, c_stringNoCase), 
                    StringLength(entireFunctionReplacer)+StringFind(evaluationCandidate, entireFunctionReplacer, c_stringNoCase)
                );

            }
            else {
                LibapxPrintError(p, current+" //UNABLE TO FIND [FN_REPLACED], NOTIFY SEROBLISS");
                return "0";
            }
            
            //For each functionParameter
            //If string is a fixed
            //Parameter is good, carry on
            //Else if string is NOT fixed, recursively parse
            j = 1;
            while(StringWord(funcParameters, j) != "") {
                funcParameter = StringWord(funcParameters, j);
                
                j += 1;
                
                funcParameters = StringReplaceWord(
                    funcParameters, 
                    funcParameter, 
                    ParseVariableFunctionStatement(funcParameter, ug, p), 
                    1, 
                    c_stringNoCase
                );
            }

            
            
            funcIndex = LibapxTManagerGetInt(gv_LibapxVariableFunctionMapPrefix, StringCase(current, false));

            // TODO: Pass in actual unit group;
            funcOutput = gv_LibapxVariableFunctionTable[funcIndex](p, ug, funcParameters);

            evaluationCandidate = StringReplaceWord(evaluationCandidate, "[FN_REPLACED]", funcOutput, 1, c_stringNoCase);

            

            //Do not iterate I, so func output will be next iteration as it differs from original string
            continue;
        }


            //Global Variables(lv.varName will stop attempted global variable finding and using)
            if(StringSub(current, 1, 3) != "lv.") {
                if(GlobalVariableExists(current, p)) {
                    evaluationCandidate = StringReplaceWord(evaluationCandidate, current, GetGlobalVariableValue(current, p), 1, c_stringNoCase); 
                    continue;
                }
            }
            else {
                //If lv. remove from current
                current = StringReplace(current, "", 1, 3);
                evaluationCandidate = StringReplaceWord(evaluationCandidate,"lv.", "", 1, c_stringCase );
            }

            //Local variable
            u = UnitGroupUnit(ug, 1);


            if(UnitVariableExists(current, u)) {
                evaluationCandidate = StringReplaceWord(evaluationCandidate, current, GetUnitVariableValue(current, u), 1, c_stringNoCase); 
                continue;
            }
            else {
                if(gv_LibapxPlayer[p].helpMessages) {
                LibapxPrintError(p, "\'" + current + "\', Unknown Variable, terminating variable parsing");
                }
                return "";
            }
            
            


        i += 1;
    }

    if(useEvaluator) {
        return LibapxUtilsInfixEvaluator(evaluationCandidate);
    }
    else {
        return evaluationCandidate;
    }
}


//Replace all valid variable brackets
string LibapxVariableParse(string input, unitgroup ug, int p) {
    int indexOfParseTarget = StringFind(input, gv_LibapxVariableParserStartString, c_stringNoCase);
    int endIndexOfParseTarget = StringFind(
        StringSub(input, indexOfParseTarget, StringLength(input)),
        gv_LibapxVariableParserEndString, 
        c_stringNoCase
    );
    string currentParse;

    if(indexOfParseTarget != -1) {
        endIndexOfParseTarget += indexOfParseTarget-2;
    }

    if(
        indexOfParseTarget != -1 && endIndexOfParseTarget != -1 &&
        !LibapxBracketsWithinBracketsSimple(input, indexOfParseTarget)
    ) {
        currentParse = StringSub(
            input, 
            indexOfParseTarget + StringLength(gv_LibapxVariableParserStartString),
            endIndexOfParseTarget
            
        );

        currentParse = LibapxUtilsTrimExcessZeros(ParseVariableFunctionStatement(currentParse, ug, p));
        
        input = StringReplace(
            input, 
            currentParse,
            indexOfParseTarget,
            endIndexOfParseTarget+StringLength(gv_LibapxVariableParserEndString)
        );
    
        return LibapxVariableParse(input, ug, p);
    }
    else {
        return input;
    }

    return "ERR CODE SHOULD NO REACH HERE";
} 

//Parsing Handlers below for Ngo's String Parser
// =======================================================
//
static const string gv_LibapxStringParserStartString = "$[";
static const string gv_LibapxStringParserEndString = "]";

//Checks if prefixed and postfixed $[anything inside this would return true]
bool LibapxVarStringBracketCheck(string stringToCheck, int currentIndex) {
	string stringBefore = StringSub(stringToCheck, 1, currentIndex - 1);
	string stringAfter = StringSub(stringToCheck,  currentIndex + 1, StringLength(stringToCheck));
	int i = 1;
	string temp;
	int openI = 0;
	int closeI = 0;
	bool opened = false;
	bool closed = false;
    int stringBeforeEndIndex = StringFind(stringBefore, gv_LibapxStringParserEndString, c_stringNoCase);
    int stringBeforeStartIndex = StringFind(stringBefore, gv_LibapxStringParserStartString, c_stringNoCase);
    int stringAfterEndIndex = StringFind(stringAfter, gv_LibapxStringParserEndString, c_stringNoCase);
    int stringAfterStartIndex = StringFind(stringAfter, gv_LibapxStringParserStartString, c_stringNoCase);

	if (
        (stringBeforeStartIndex != -1) 
        &&
        (stringBeforeStartIndex > stringBeforeEndIndex)
        &&
        (stringAfterEndIndex != -1)
        && 
        ((stringAfterEndIndex < stringAfterStartIndex) || (stringAfterStartIndex == -1))
        ) {
        return true;
	}
	return false;
}

static string GetParamsFromStringFunction(string input, int startOfFunc) { 
    string stringToParse = LibapxStringTrim(StringSub(input, startOfFunc, StringLength(input)));  // I think this is it. Example: (Boy I can't eat dis,19)
    int i = 1;
    int paranthesisLevel = 0;
    string current;
    string output = "";
    //RETURN GROUPED FUNCTION PARAMETERS
    // DebugLog( "[" + stringToParse + "]");


    while(StringSub(stringToParse, i, i) != "") { 
        current = StringSub(stringToParse, i, i); 
        // DebugLog(current+" // CURR");

        //FIRST ITERATION
        if(current == "(" && i == 1) {
            paranthesisLevel += 1;
            i += 1;
            // DebugLog("// FIRST ITERATION WAS (");
            continue;
        }
        else if (current != "(" && i == 1) {
            break;
        }

        i += 1;

        if(current == "(") {
            paranthesisLevel += 1;
            // DebugLog("// PARENTHESIS LEVEL INCREASED");
        }
        else if (current == ")") {
            paranthesisLevel -= 1;
            // DebugLog( IntToString(paranthesisLevel) + "// PARENTHESIS LEVEL DECREASED");
            
            if(paranthesisLevel == 0) {
                // DebugLog("// END OF PARENTHESIS PAIRS, [RETURNING]");
                return output;    
            }
        }

        // if(paranthesisLevel == 1 && current == ",") {
        //     // DebugLog("// COMMA FOUND, S P A C I N G");
        //     output += ","; // original
        //     // output += ","; //DEBUGGING BY NGO
        // }

        if(current == " ") {
            output += current;
        }
        else if(current != " ") {
            output += current;
        }

        
        // DebugLog(output + " // CURRENT OUTPUT");
    }

    return "FAULT";
}

// //Is valid for variable parsing (might not need to make a new one for strings)
// static bool IsValidForVarStringParsing(string c) {
// 	int i = 1;
// 	string current;
// 	while(StringWord(gv_LibapxValidOperatorsWithParen + " ,", i) != "") {
// 		current = StringWord(gv_LibapxValidOperatorsWithParen + " ,", i);

// 		if(current == c) {
// 			return true;
// 		}
// 		i += 1;
// 	}

// 	return false;
// } 


//Seperates out operators for easy iteration (Ngo's String Parser)
static string SpaceOperatorsForReplacementStrings(string input) {
    int j = 1;
    int i = 1;
    string currentOp;
    string current;
    string output = "";
    bool matchedOp = false;
    // string thingsToSpace = gv_LibapxValidOperatorsWithParen + " ,";
    // string thingsToSpace = " ( ) " + " ,";
    string thingsToSpace = " ( ) " + " ,";

    
    for (i = 1; StringSub(input, i, i) != ""; i += 1) {
		current = StringSub(input, i, i);
        matchedOp = false;

        j = 1;
        while(StringWord(thingsToSpace, j) != "") {
            currentOp = StringWord(thingsToSpace, j);
            if(currentOp == current) {
                output += " "+currentOp+" ";
                output = output;
                matchedOp = true;
                break;
            }
            j += 1;
        }
        if(!matchedOp && current != "") {
            output += current;
            // output = LibapxStringTrim(output);
        }
    }
    // return LibapxStringTrim(output);
    return (output);

}

static string ParseVarStringFunctionStatement(string input, unitgroup ug, int p) {
    int i = 1;
    int j = 1;
    string current = "";
    string funcKey;
    int funcIndex = 0;
    string funcParameters = "";
    string funcParameter = "";
    string entireFunctionReplacer = "";
    string funcOutput;
    // //original
    string evaluationCandidate = SpaceOperatorsForReplacementStrings(input); // this is what causes $functions to be read
    //WIP
    // string evaluationCandidate = input;
    unit u;
    bool useEvaluator = true;


    while(StringWord(evaluationCandidate, i) != "") {
        current = StringWord(evaluationCandidate, i);
       
        if(
            IsValidForVariableParsing(current)
            || // OR //
            LibapxIsFixed(current)
        ) {
            i += 1;
            continue;
        }

        // Debug: Space Formatting starts past here
        
        if(LibapxTManagerExists(gv_LibapxVariableFunctionMapPrefix, StringCase(current, false))) {
            //Problems with the funcParameters start here (it removes spaces)
            // DebugLog(evaluationCandidate);
            funcParameters = GetParamsFromStringFunction(evaluationCandidate, StringFind(evaluationCandidate, current, false) + StringLength(current)); //this removes spaces T_T

            // DebugLog(funcParameters);
            // DebugLog(funcParameters + IntToString(StringFind(evaluationCandidate, current, false) + StringLength(current)));


            if(funcParameters == "FAULT") {
                i += 1;
                if(gv_LibapxPlayer[p].helpMessages) {
                LibapxPrintError(p, "\'" + current + "\', Malformed Function, terminating variable parsing");
                }
                return "0";
            }



            // entireFunctionReplacer  = LibapxStringTrim(SpaceOperatorsForReplacementStrings(current+"("+funcParameters+")"));

            // Original Form
            // entireFunctionReplacer  = LibapxStringTrim(SpaceOperatorsForReplacement(current+"("+funcParameters+")"));
            // entireFunctionReplacer  = LibapxStringTrim(SpaceOperatorsForReplacementStrings(current+"("+funcParameters+")"));
            entireFunctionReplacer  = LibapxStringTrim(current+" ("+funcParameters+")");
            // DebugLog(entireFunctionReplacer + "stupidshit");


            // Screw it
            // entireFunctionReplacer  = [FN_REPLACED];

            
        


            // // What works so far W.I.P:
            // entireFunctionReplacer  = current+"("+funcParameters+")";

            // LibapxPrintOutput(p,"Replacing: <n>" + evaluationCandidate); // DEBUGGING
            // LibapxPrintOutput(p,"With: <n>" + entireFunctionReplacer); // DEBUGGING



            // ISSUE: the replacer parameter contents still doesn't match the one in candidate. 
           //  because the spaces are being removed.
            
            if(StringFind(evaluationCandidate, entireFunctionReplacer, c_stringNoCase) != -1) {
                evaluationCandidate = StringReplace(
                    evaluationCandidate, 
                    "[FN_REPLACED]", 
                    StringFind(evaluationCandidate, entireFunctionReplacer, c_stringNoCase), 
                    StringLength(entireFunctionReplacer)+StringFind(evaluationCandidate, entireFunctionReplacer, c_stringNoCase)
                );


            }
            else {
                LibapxPrintError(p, current+" //UNABLE TO FIND [FN_REPLACED], NOTIFY SEROBLISS");
                return "0";
            }
            
            //For each functionParameter
            //If string is a fixed
            //Parameter is good, carry on
            //Else if string is NOT fixed, recursively parse
            j = 1;
            while(StringWord(funcParameters, j) != "") {
                funcParameter = StringWord(funcParameters, j);
                
                j += 1;
                
                funcParameters = StringReplaceWord(
                    funcParameters, 
                    funcParameter, 
                    ParseVarStringFunctionStatement(funcParameter, ug, p), 
                    1, 
                    c_stringNoCase
                );
            }

            
            
            funcIndex = LibapxTManagerGetInt(gv_LibapxVariableFunctionMapPrefix, StringCase(current, false));

            // TODO: Pass in actual unit group;
            funcOutput = gv_LibapxVariableFunctionTable[funcIndex](p, ug, funcParameters);

            evaluationCandidate = StringReplaceWord(evaluationCandidate, "[FN_REPLACED]", funcOutput, 1, c_stringNoCase);

            

            //Do not iterate I, so func output will be next iteration as it differs from original string
            continue;
        }

        
        //this is where it's trying to find variables (I got the string parser to work here)

        else if(StringSub(current,1,1) == "&") {
            current = StringSub(current, 2, StringLength(current));
            //Global Variables(lv.varName will stop attempted global variable finding and using)
            if(StringSub(current, 1, 3) != "lv.") {
                if(GlobalVariableExists(current, p)) {
                    evaluationCandidate = StringReplaceWord(evaluationCandidate, "&" + current, GetGlobalVariableValue(current, p), 1, c_stringNoCase); 
                    continue;
                }
            }
            else {
                //If lv. remove from current
                current = StringReplace(current, "", 1, 3);
                evaluationCandidate = StringReplaceWord(evaluationCandidate,"lv.", "", 1, c_stringCase );
            }

            //Local variable
            u = UnitGroupUnit(ug, 1);

            
            if(UnitVariableExists(current, u)) {
                evaluationCandidate = StringReplaceWord(evaluationCandidate, "&" + current, GetUnitVariableValue(current, u), 1, c_stringNoCase); 
                continue;
            }
            else {
                if(gv_LibapxPlayer[p].helpMessages) {
                LibapxPrintError(p, "\'" + current + "\', Unknown Variable, terminating variable parsing.");
                }
                return "";
            }
        }
        else if(current != "") {
            useEvaluator = false;
        }
            

        
        i += 1;
    }

    // Reformatting it I think (Made by Ngo)
    evaluationCandidate = StringReplaceWord(evaluationCandidate," , ",",",c_stringReplaceAll,c_stringCase);
    evaluationCandidate = StringReplaceWord(evaluationCandidate," ( ","(",c_stringReplaceAll,c_stringCase);
    evaluationCandidate = StringReplaceWord(evaluationCandidate," ) ",")",c_stringReplaceAll,c_stringCase);
    

    if(useEvaluator) {
        return LibapxUtilsInfixEvaluator(evaluationCandidate);
        // return evaluationCandidate;
    }
    else {
        return evaluationCandidate;
    }
}

//Replace all valid "string" variable brackets
string LibapxVarStringParse(string input, unitgroup ug, int p) {
    int indexOfParseTarget = StringFind(input, gv_LibapxStringParserStartString, c_stringNoCase);
    int endIndexOfParseTarget = StringFind(
        StringSub(input, indexOfParseTarget, StringLength(input)),
        gv_LibapxStringParserEndString, 
        c_stringNoCase
    );
    string currentParse;

    if(indexOfParseTarget != -1) {
        endIndexOfParseTarget += indexOfParseTarget-2;
    }

    if(
        indexOfParseTarget != -1 && endIndexOfParseTarget != -1 &&
        !LibapxBracketsWithinBracketsSimple(input, indexOfParseTarget)
    ) {
        currentParse = StringSub(
            input, 
            indexOfParseTarget + StringLength(gv_LibapxStringParserStartString),
            endIndexOfParseTarget
            
        );
        //This is where it starts using functions.

        // Note: It seems that the first half of the ParseVarStringFunctionStatement() is to blame here.
       // check and also see if we can circumvent the space operator issue.
      // it will be a bit challenging as the variable parser is always trying to convert the entire string into 1 variable.
     


        // String Variables Statements W.I.P
        // currentParse = LibapxUtilsTrimExcessZeros(ParseVarStringFunctionStatement(currentParse, ug, p));
        currentParse = ParseVarStringFunctionStatement(currentParse, ug, p); //ok zero trim isnt necessary for functions...


        // Variable Function Statements (Original).
        // currentParse = LibapxUtilsTrimExcessZeros(ParseVariableFunctionStatement(currentParse, ug, p));

        // // This is just so that semi-colons can exist. 
        currentParse = StringReplaceWord(currentParse,";"," ; ",c_stringReplaceAll,c_stringCase);
        
        input = StringReplace(
            input, 
            currentParse,
            indexOfParseTarget,
            endIndexOfParseTarget+StringLength(gv_LibapxStringParserEndString)
        );
    
        return LibapxVarStringParse(input, ug, p);
    }
    else {
        return input;
    }

    return "ERR CODE SHOULD NO REACH HERE";
} 






